/**
 * @fileOverview Regular expressions to use to parse user-agents.
 * This file is automatically generated by "update-regexes.js".
 *
 * DO NOT UPDATE THE FILE MANUALLY (see README.md)
 */
/*global exports*/
exports.user_agents_parsers = [
  {
    r: new RegExp("(SeaMonkey|Camino)/(\\d+)\\.(\\d+)\\.?([ab]?\\d+[a-z]*)")
  },
  {
    r: new RegExp("(Pale[Mm]oon)/(\\d+)\\.(\\d+)\\.?(\\d+)?"),
    family: "Pale Moon (Firefox Variant)"
  },
  {
    r: new RegExp("(Fennec)/(\\d+)\\.(\\d+)\\.?([ab]?\\d+[a-z]*)"),
    family: "Firefox Mobile"
  },
  {
    r: new RegExp("(Fennec)/(\\d+)\\.(\\d+)(pre)"),
    family: "Firefox Mobile"
  },
  {
    r: new RegExp("(Fennec)/(\\d+)\\.(\\d+)"),
    family: "Firefox Mobile"
  },
  {
    r: new RegExp("Mobile.*(Firefox)/(\\d+)\\.(\\d+)"),
    family: "Firefox Mobile"
  },
  {
    r: new RegExp("(Namoroka|Shiretoko|Minefield)/(\\d+)\\.(\\d+)\\.(\\d+(?:pre)?)"),
    family: "Firefox ($1)"
  },
  {
    r: new RegExp("(Firefox)/(\\d+)\\.(\\d+)(a\\d+[a-z]*)"),
    family: "Firefox Alpha"
  },
  {
    r: new RegExp("(Firefox)/(\\d+)\\.(\\d+)(b\\d+[a-z]*)"),
    family: "Firefox Beta"
  },
  {
    r: new RegExp("(Firefox)-(?:\\d+\\.\\d+)?/(\\d+)\\.(\\d+)(a\\d+[a-z]*)"),
    family: "Firefox Alpha"
  },
  {
    r: new RegExp("(Firefox)-(?:\\d+\\.\\d+)?/(\\d+)\\.(\\d+)(b\\d+[a-z]*)"),
    family: "Firefox Beta"
  },
  {
    r: new RegExp("(Namoroka|Shiretoko|Minefield)/(\\d+)\\.(\\d+)([ab]\\d+[a-z]*)?"),
    family: "Firefox ($1)"
  },
  {
    r: new RegExp("(Firefox).*Tablet browser (\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "MicroB"
  },
  {
    r: new RegExp("(MozillaDeveloperPreview)/(\\d+)\\.(\\d+)([ab]\\d+[a-z]*)?")
  },
  {
    r: new RegExp("(Flock)/(\\d+)\\.(\\d+)(b\\d+?)")
  },
  {
    r: new RegExp("(RockMelt)/(\\d+)\\.(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(Navigator)/(\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "Netscape"
  },
  {
    r: new RegExp("(Navigator)/(\\d+)\\.(\\d+)([ab]\\d+)"),
    family: "Netscape"
  },
  {
    r: new RegExp("(Netscape6)/(\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "Netscape"
  },
  {
    r: new RegExp("(MyIBrow)/(\\d+)\\.(\\d+)"),
    family: "My Internet Browser"
  },
  {
    r: new RegExp("(Opera Tablet).*Version/(\\d+)\\.(\\d+)(?:\\.(\\d+))?")
  },
  {
    r: new RegExp("(Opera)/.+Opera Mobi.+Version/(\\d+)\\.(\\d+)"),
    family: "Opera Mobile"
  },
  {
    r: new RegExp("Opera Mobi"),
    family: "Opera Mobile"
  },
  {
    r: new RegExp("(Opera Mini)/(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(Opera Mini)/att/(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(Opera)/9.80.*Version/(\\d+)\\.(\\d+)(?:\\.(\\d+))?")
  },
  {
    r: new RegExp("(?:Mobile Safari).*(OPR)/(\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "Opera Mobile"
  },
  {
    r: new RegExp("(?:Chrome).*(OPR)/(\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "Opera"
  },
  {
    r: new RegExp("(hpw|web)OS/(\\d+)\\.(\\d+)(?:\\.(\\d+))?"),
    family: "webOS Browser"
  },
  {
    r: new RegExp("(luakit)"),
    family: "LuaKit"
  },
  {
    r: new RegExp("(Snowshoe)/(\\d+)\\.(\\d+).(\\d+)")
  },
  {
    r: new RegExp("(Lightning)/(\\d+)\\.(\\d+)([ab]?\\d+[a-z]*)")
  },
  {
    r: new RegExp("(Firefox)/(\\d+)\\.(\\d+)\\.(\\d+(?:pre)?) \\(Swiftfox\\)"),
    family: "Swiftfox"
  },
  {
    r: new RegExp("(Firefox)/(\\d+)\\.(\\d+)([ab]\\d+[a-z]*)? \\(Swiftfox\\)"),
    family: "Swiftfox"
  },
  {
    r: new RegExp("(rekonq)/(\\d+)\\.(\\d+)\\.?(\\d+)? Safari"),
    family: "Rekonq"
  },
  {
    r: new RegExp("rekonq"),
    family: "Rekonq"
  },
  {
    r: new RegExp("(conkeror|Conkeror)/(\\d+)\\.(\\d+)\\.?(\\d+)?"),
    family: "Conkeror"
  },
  {
    r: new RegExp("(konqueror)/(\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "Konqueror"
  },
  {
    r: new RegExp("(WeTab)-Browser")
  },
  {
    r: new RegExp("(Comodo_Dragon)/(\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "Comodo Dragon"
  },
  {
    r: new RegExp("(YottaaMonitor|BrowserMob|HttpMonitor|YandexBot|Slurp|BingPreview|PagePeeker|ThumbShotsBot|WebThumb|URL2PNG|ZooShot|GomezA|Catchpoint bot|Willow Internet Crawler|Google SketchUp|Read%20Later)")
  },
  {
    r: new RegExp("(Symphony) (\\d+).(\\d+)")
  },
  {
    r: new RegExp("(Minimo)")
  },
  {
    r: new RegExp("(CrMo)/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "Chrome Mobile"
  },
  {
    r: new RegExp("(CriOS)/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "Chrome Mobile iOS"
  },
  {
    r: new RegExp("(Chrome)/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+) Mobile"),
    family: "Chrome Mobile"
  },
  {
    r: new RegExp("(chromeframe)/(\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "Chrome Frame"
  },
  {
    r: new RegExp("(UCBrowser)[ /](\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "UC Browser"
  },
  {
    r: new RegExp("(UC Browser)[ /](\\d+)\\.(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(UC Browser|UCBrowser|UCWEB)(\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "UC Browser"
  },
  {
    r: new RegExp("(SLP Browser)/(\\d+)\\.(\\d+)"),
    family: "Tizen Browser"
  },
  {
    r: new RegExp("(SE 2\\.X) MetaSr (\\d+)\\.(\\d+)"),
    family: "Sogou Explorer"
  },
  {
    r: new RegExp("(baidubrowser)[/\\s](\\d+)"),
    family: "Baidu Browser"
  },
  {
    r: new RegExp("(FlyFlow)/(\\d+)\\.(\\d+)"),
    family: "Baidu Explorer"
  },
  {
    r: new RegExp("(Pingdom.com_bot_version_)(\\d+)\\.(\\d+)"),
    family: "PingdomBot"
  },
  {
    r: new RegExp("(facebookexternalhit)/(\\d+)\\.(\\d+)"),
    family: "FacebookBot"
  },
  {
    r: new RegExp("(Twitterbot)/(\\d+)\\.(\\d+)"),
    family: "TwitterBot"
  },
  {
    r: new RegExp("(Rackspace Monitoring)/(\\d+)\\.(\\d+)"),
    family: "RackspaceBot"
  },
  {
    r: new RegExp("(PyAMF)/(\\d+)\\.(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(YaBrowser)/(\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "Yandex Browser"
  },
  {
    r: new RegExp("(Chrome)/(\\d+)\\.(\\d+)\\.(\\d+).* MRCHROME"),
    family: "Mail.ru Chromium Browser"
  },
  {
    r: new RegExp("(AOL) (\\d+)\\.(\\d+); AOLBuild (\\d+)")
  },
  {
    r: new RegExp("(AdobeAIR|FireWeb|Jasmine|ANTGalio|Midori|Fresco|Lobo|PaleMoon|Maxthon|Lynx|OmniWeb|Dillo|Camino|Demeter|Fluid|Fennec|Epiphany|Shiira|Sunrise|Flock|Netscape|Lunascape|WebPilot|Vodafone|NetFront|Netfront|Konqueror|SeaMonkey|Kazehakase|Vienna|Iceape|Iceweasel|IceWeasel|Iron|K-Meleon|Sleipnir|Galeon|GranParadiso|Opera Mini|iCab|NetNewsWire|ThunderBrowse|Iris|UP\\.Browser|Bunjalloo|Google Earth|Raven for Mac|Openwave)/(\\d+)\\.(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(Chromium|Chrome)/(\\d+)\\.(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(Bolt|Jasmine|IceCat|Skyfire|Midori|Maxthon|Lynx|Arora|IBrowse|Dillo|Camino|Shiira|Fennec|Phoenix|Chrome|Flock|Netscape|Lunascape|Epiphany|WebPilot|Opera Mini|Opera|Vodafone|NetFront|Netfront|Konqueror|Googlebot|SeaMonkey|Kazehakase|Vienna|Iceape|Iceweasel|IceWeasel|Iron|K-Meleon|Sleipnir|Galeon|GranParadiso|iCab|NetNewsWire|Space Bison|Stainless|Orca|Dolfin|BOLT|Minimo|Tizen Browser|Polaris|Abrowser|Planetweb|ICE Browser)/(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(Chromium|Chrome)/(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(iRider|Crazy Browser|SkipStone|iCab|Lunascape|Sleipnir|Maemo Browser) (\\d+)\\.(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(iCab|Lunascape|Opera|Android|Jasmine|Polaris) (\\d+)\\.(\\d+)\\.?(\\d+)?")
  },
  {
    r: new RegExp("(Kindle)/(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(Android) Donut"),
    major: "1",
    minor: "2"
  },
  {
    r: new RegExp("(Android) Eclair"),
    major: "2",
    minor: "1"
  },
  {
    r: new RegExp("(Android) Froyo"),
    major: "2",
    minor: "2"
  },
  {
    r: new RegExp("(Android) Gingerbread"),
    major: "2",
    minor: "3"
  },
  {
    r: new RegExp("(Android) Honeycomb"),
    major: "3"
  },
  {
    r: new RegExp("(IEMobile)[ /](\\d+)\\.(\\d+)"),
    family: "IE Mobile"
  },
  {
    r: new RegExp("(MSIE) (\\d+)\\.(\\d+).*XBLWP7"),
    family: "IE Large Screen"
  },
  {
    r: new RegExp("(Firefox)/(\\d+)\\.(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(Firefox)/(\\d+)\\.(\\d+)(pre|[ab]\\d+[a-z]*)?")
  },
  {
    r: new RegExp("(Obigo)InternetBrowser")
  },
  {
    r: new RegExp("(Obigo)\\-Browser")
  },
  {
    r: new RegExp("(Obigo|OBIGO)[^\\d]*(\\d+)(?:.(\\d+))?"),
    family: "Obigo"
  },
  {
    r: new RegExp("(MAXTHON|Maxthon) (\\d+)\\.(\\d+)"),
    family: "Maxthon"
  },
  {
    r: new RegExp("(Maxthon|MyIE2|Uzbl|Shiira)"),
    major: "0"
  },
  {
    r: new RegExp("PLAYSTATION 3.+WebKit"),
    family: "NetFront NX"
  },
  {
    r: new RegExp("PLAYSTATION 3"),
    family: "NetFront"
  },
  {
    r: new RegExp("(PlayStation Portable)"),
    family: "NetFront"
  },
  {
    r: new RegExp("(PlayStation Vita)"),
    family: "NetFront NX"
  },
  {
    r: new RegExp("AppleWebKit.+ (NX)/(\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "NetFront NX"
  },
  {
    r: new RegExp("(Nintendo 3DS)"),
    family: "NetFront NX"
  },
  {
    r: new RegExp("(BrowseX) \\((\\d+)\\.(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(NCSA_Mosaic)/(\\d+)\\.(\\d+)"),
    family: "NCSA Mosaic"
  },
  {
    r: new RegExp("(POLARIS)/(\\d+)\\.(\\d+)"),
    family: "Polaris"
  },
  {
    r: new RegExp("(Embider)/(\\d+)\\.(\\d+)"),
    family: "Polaris"
  },
  {
    r: new RegExp("(BonEcho)/(\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "Bon Echo"
  },
  {
    r: new RegExp("M?QQBrowser"),
    family: "QQ Browser"
  },
  {
    r: new RegExp("(iPod).+Version/(\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "Mobile Safari"
  },
  {
    r: new RegExp("(iPod).*Version/(\\d+)\\.(\\d+)"),
    family: "Mobile Safari"
  },
  {
    r: new RegExp("(iPhone).*Version/(\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "Mobile Safari"
  },
  {
    r: new RegExp("(iPhone).*Version/(\\d+)\\.(\\d+)"),
    family: "Mobile Safari"
  },
  {
    r: new RegExp("(iPad).*Version/(\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "Mobile Safari"
  },
  {
    r: new RegExp("(iPad).*Version/(\\d+)\\.(\\d+)"),
    family: "Mobile Safari"
  },
  {
    r: new RegExp("(iPod|iPhone|iPad);.*CPU.*OS (\\d+)(?:_\\d+)?_(\\d+).*Mobile"),
    family: "Mobile Safari"
  },
  {
    r: new RegExp("(iPod|iPhone|iPad)"),
    family: "Mobile Safari"
  },
  {
    r: new RegExp("(AvantGo) (\\d+).(\\d+)")
  },
  {
    r: new RegExp("(OneBrowser)/(\\d+).(\\d+)"),
    family: "ONE Browser"
  },
  {
    r: new RegExp("(Avant)"),
    major: "1"
  },
  {
    r: new RegExp("(QtCarBrowser)"),
    major: "1"
  },
  {
    r: new RegExp("(iBrowser/Mini)(\\d+).(\\d+)"),
    family: "iBrowser Mini"
  },
  {
    r: new RegExp("^(Nokia)"),
    family: "Nokia Services (WAP) Browser"
  },
  {
    r: new RegExp("(NokiaBrowser)/(\\d+)\\.(\\d+).(\\d+)\\.(\\d+)"),
    family: "Nokia Browser"
  },
  {
    r: new RegExp("(NokiaBrowser)/(\\d+)\\.(\\d+).(\\d+)"),
    family: "Nokia Browser"
  },
  {
    r: new RegExp("(NokiaBrowser)/(\\d+)\\.(\\d+)"),
    family: "Nokia Browser"
  },
  {
    r: new RegExp("(BrowserNG)/(\\d+)\\.(\\d+).(\\d+)"),
    family: "Nokia Browser"
  },
  {
    r: new RegExp("(Series60)/5\\.0"),
    family: "Nokia Browser",
    major: "7",
    minor: "0"
  },
  {
    r: new RegExp("(Series60)/(\\d+)\\.(\\d+)"),
    family: "Nokia OSS Browser"
  },
  {
    r: new RegExp("(S40OviBrowser)/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "Ovi Browser"
  },
  {
    r: new RegExp("(Nokia)[EN]?(\\d+)")
  },
  {
    r: new RegExp("(BB10);"),
    family: "BlackBerry WebKit"
  },
  {
    r: new RegExp("(PlayBook).+RIM Tablet OS (\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "BlackBerry WebKit"
  },
  {
    r: new RegExp("(Black[bB]erry).+Version/(\\d+)\\.(\\d+)\\.(\\d+)"),
    family: "BlackBerry WebKit"
  },
  {
    r: new RegExp("(Black[bB]erry)\\s?(\\d+)"),
    family: "BlackBerry"
  },
  {
    r: new RegExp("(OmniWeb)/v(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(Blazer)/(\\d+)\\.(\\d+)"),
    family: "Palm Blazer"
  },
  {
    r: new RegExp("(Pre)/(\\d+)\\.(\\d+)"),
    family: "Palm Pre"
  },
  {
    r: new RegExp("(Links) \\((\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(QtWeb) Internet Browser/(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(Silk)/(\\d+)\\.(\\d+)(?:\\.([0-9\\-]+))?"),
    family: "Amazon Silk"
  },
  {
    r: new RegExp("(PhantomJS)/(\\d+)\\.(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(AppleWebKit)/(\\d+)\\.?(\\d+)?\\+ .* Safari"),
    family: "WebKit Nightly"
  },
  {
    r: new RegExp("(Version)/(\\d+)\\.(\\d+)(?:\\.(\\d+))?.*Safari/"),
    family: "Safari"
  },
  {
    r: new RegExp("(Safari)/\\d+")
  },
  {
    r: new RegExp("(OLPC)/Update(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(OLPC)/Update()\\.(\\d+)"),
    major: "0"
  },
  {
    r: new RegExp("(SEMC\\-Browser)/(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(Teleca)"),
    family: "Teleca Browser"
  },
  {
    r: new RegExp("(Phantom)/V(\\d+)\\.(\\d+)"),
    family: "Phantom Browser"
  },
  {
    r: new RegExp("([MS]?IE) (\\d+)\\.(\\d+)"),
    family: "IE"
  },
  {
    r: new RegExp("(python-requests)/(\\d+)\\.(\\d+)"),
    family: "Python Requests"
  }
];

exports.os_parsers = [
  {
    r: new RegExp("(Android) (\\d+)\\.(\\d+)(?:[.\\-]([a-z0-9]+))?")
  },
  {
    r: new RegExp("(Android)\\-(\\d+)\\.(\\d+)(?:[.\\-]([a-z0-9]+))?")
  },
  {
    r: new RegExp("(Android) Donut")
  },
  {
    r: new RegExp("(Android) Eclair")
  },
  {
    r: new RegExp("(Android) Froyo")
  },
  {
    r: new RegExp("(Android) Gingerbread")
  },
  {
    r: new RegExp("(Android) Honeycomb")
  },
  {
    r: new RegExp("(Silk-Accelerated=[a-z]{4,5})"),
    family: undefined
  },
  {
    r: new RegExp("(Windows (?:NT 5\\.2|NT 5\\.1))"),
    family: undefined
  },
  {
    r: new RegExp("(XBLWP7)"),
    family: undefined
  },
  {
    r: new RegExp("(Windows NT 6\\.1)"),
    family: undefined
  },
  {
    r: new RegExp("(Windows NT 6\\.0)"),
    family: undefined
  },
  {
    r: new RegExp("(Win 9x 4\\.90)"),
    family: undefined
  },
  {
    r: new RegExp("(Windows 98|Windows XP|Windows ME|Windows 95|Windows CE|Windows 7|Windows NT 4\\.0|Windows Vista|Windows 2000|Windows 3.1)")
  },
  {
    r: new RegExp("(Windows NT 6\\.2; ARM;)"),
    family: undefined
  },
  {
    r: new RegExp("(Windows NT 6\\.2)"),
    family: undefined
  },
  {
    r: new RegExp("(Windows NT 5\\.0)"),
    family: undefined
  },
  {
    r: new RegExp("(Windows Phone) (\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(Windows Phone) OS (\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(Windows ?Mobile)"),
    family: undefined
  },
  {
    r: new RegExp("(WinNT4.0)"),
    family: undefined
  },
  {
    r: new RegExp("(Win98)"),
    family: undefined
  },
  {
    r: new RegExp("(Tizen)/(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(Mac OS X) (\\d+)[_.](\\d+)(?:[_.](\\d+))?")
  },
  {
    r: new RegExp("Mac_PowerPC"),
    family: undefined
  },
  {
    r: new RegExp("(?:PPC|Intel) (Mac OS X)")
  },
  {
    r: new RegExp("(CPU OS|iPhone OS) (\\d+)_(\\d+)(?:_(\\d+))?"),
    family: undefined
  },
  {
    r: new RegExp("(iPhone|iPad|iPod); Opera"),
    family: undefined
  },
  {
    r: new RegExp("(iPhone|iPad|iPod).*Mac OS X.*Version/(\\d+)\\.(\\d+)"),
    family: undefined
  },
  {
    r: new RegExp("(AppleTV)/(\\d+)\\.(\\d+)"),
    family: undefined
  },
  {
    r: new RegExp("(CrOS) [a-z0-9_]+ (\\d+)\\.(\\d+)(?:\\.(\\d+))?"),
    family: undefined
  },
  {
    r: new RegExp("([Dd]ebian)"),
    family: undefined
  },
  {
    r: new RegExp("(Linux Mint)(?:/(\\d+))?")
  },
  {
    r: new RegExp("(Mandriva)(?: Linux)?/(?:[\\d.-]+m[a-z]{2}(\\d+).(\\d))?")
  },
  {
    r: new RegExp("(Symbian[Oo][Ss])/(\\d+)\\.(\\d+)"),
    family: undefined
  },
  {
    r: new RegExp("(Symbian/3).+NokiaBrowser/7\\.3"),
    family: undefined
  },
  {
    r: new RegExp("(Symbian/3).+NokiaBrowser/7\\.4"),
    family: undefined
  },
  {
    r: new RegExp("(Symbian/3)"),
    family: undefined
  },
  {
    r: new RegExp("(Series 60|SymbOS|S60)"),
    family: undefined
  },
  {
    r: new RegExp("(MeeGo)")
  },
  {
    r: new RegExp("Symbian [Oo][Ss]"),
    family: undefined
  },
  {
    r: new RegExp("Series40;"),
    family: undefined
  },
  {
    r: new RegExp("(BB10);.+Version/(\\d+)\\.(\\d+)\\.(\\d+)"),
    family: undefined
  },
  {
    r: new RegExp("(Black[Bb]erry)[0-9a-z]+/(\\d+)\\.(\\d+)\\.(\\d+)(?:\\.(\\d+))?"),
    family: undefined
  },
  {
    r: new RegExp("(Black[Bb]erry).+Version/(\\d+)\\.(\\d+)\\.(\\d+)(?:\\.(\\d+))?"),
    family: undefined
  },
  {
    r: new RegExp("(RIM Tablet OS) (\\d+)\\.(\\d+)\\.(\\d+)"),
    family: undefined
  },
  {
    r: new RegExp("(Play[Bb]ook)"),
    family: undefined
  },
  {
    r: new RegExp("(Black[Bb]erry)"),
    family: undefined
  },
  {
    r: new RegExp("\\(Mobile;.+Firefox/\\d+\\.\\d+"),
    family: undefined
  },
  {
    r: new RegExp("(BREW)[ /](\\d+)\\.(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(BREW);")
  },
  {
    r: new RegExp("(Brew MP|BMP)[ /](\\d+)\\.(\\d+)\\.(\\d+)"),
    family: undefined
  },
  {
    r: new RegExp("BMP;"),
    family: undefined
  },
  {
    r: new RegExp("(GoogleTV) (\\d+)\\.(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(GoogleTV)/[\\da-z]+")
  },
  {
    r: new RegExp("(WebTV)/(\\d+).(\\d+)")
  },
  {
    r: new RegExp("(hpw|web)OS/(\\d+)\\.(\\d+)(?:\\.(\\d+))?"),
    family: undefined
  },
  {
    r: new RegExp("(VRE);")
  },
  {
    r: new RegExp("(Fedora|Red Hat|PCLinuxOS)/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(Red Hat|Puppy|PCLinuxOS)/(\\d+)\\.(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(Ubuntu|Kindle|Bada|Lubuntu|BackTrack|Red Hat|Slackware)/(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(Windows|OpenBSD|FreeBSD|NetBSD|Android|WeTab)")
  },
  {
    r: new RegExp("(Ubuntu|Kubuntu|Arch Linux|CentOS|Slackware|Gentoo|openSUSE|SUSE|Red Hat|Fedora|PCLinuxOS|Gentoo|Mageia)")
  },
  {
    r: new RegExp("(Linux)/(\\d+)\\.(\\d+)")
  },
  {
    r: new RegExp("(Linux|BSD)")
  },
  {
    r: new RegExp("SunOS"),
    family: undefined
  }
];

exports.device_parsers = [
  {
    r: new RegExp("SEC_HHP_TV|SMART-TV"),
    device: "SamsungTV"
  },
  {
    r: new RegExp("NETTV"),
    device: "Philips TV"
  },
  {
    r: new RegExp("HTC ([A-Z][a-z0-9]+) Build"),
    device: "HTC $1"
  },
  {
    r: new RegExp("HTC ([A-Z][a-z0-9 ]+) \\d+\\.\\d+\\.\\d+\\.\\d+"),
    device: "HTC $1"
  },
  {
    r: new RegExp("HTC_Touch_([A-Za-z0-9]+)"),
    device: "HTC Touch ($1)"
  },
  {
    r: new RegExp("USCCHTC(\\d+)"),
    device: "HTC $1 (US Cellular)"
  },
  {
    r: new RegExp("Sprint APA(9292)"),
    device: "HTC $1 (Sprint)"
  },
  {
    r: new RegExp("HTC ([A-Za-z0-9]+ [A-Z])"),
    device: "HTC $1"
  },
  {
    r: new RegExp("HTC[-_/\\s]([A-Za-z0-9]+)"),
    device: "HTC $1"
  },
  {
    r: new RegExp("(ADR[A-Za-z0-9]+)"),
    device: "HTC $1"
  },
  {
    r: new RegExp("(HTC)")
  },
  {
    r: new RegExp("(QtCarBrowser)"),
    device: "Tesla Model S"
  },
  {
    r: new RegExp("(SamsungSGHi560)"),
    device: "Samsung SGHi560"
  },
  {
    r: new RegExp("SonyEricsson([A-Za-z0-9]+)/"),
    device: "Ericsson $1"
  },
  {
    r: new RegExp("PLAYSTATION 3"),
    device: "PlayStation 3"
  },
  {
    r: new RegExp("(PlayStation Portable)")
  },
  {
    r: new RegExp("(PlayStation Vita)")
  },
  {
    r: new RegExp("(KFOT Build)"),
    device: "Kindle Fire"
  },
  {
    r: new RegExp("(KFTT Build)"),
    device: "Kindle Fire HD"
  },
  {
    r: new RegExp("(KFJWI Build)"),
    device: "Kindle Fire HD 8.9\" WiFi"
  },
  {
    r: new RegExp("(KFJWA Build)"),
    device: "Kindle Fire HD 8.9\" 4G"
  },
  {
    r: new RegExp("(Kindle Fire)")
  },
  {
    r: new RegExp("(Kindle)")
  },
  {
    r: new RegExp("(Silk)/(\\d+)\\.(\\d+)(?:\\.([0-9\\-]+))?"),
    device: "Kindle Fire"
  },
  {
    r: new RegExp("Android[\\- ][\\d]+\\.[\\d]+; [A-Za-z]{2}\\-[A-Za-z]{2}; WOWMobile (.+) Build")
  },
  {
    r: new RegExp("Android[\\- ][\\d]+\\.[\\d]+\\-update1; [A-Za-z]{2}\\-[A-Za-z]{2}; (.+) Build")
  },
  {
    r: new RegExp("Android[\\- ][\\d]+\\.[\\d]+\\.[\\d]+; [A-Za-z]{2}\\-[A-Za-z]{2}; (.+) Build")
  },
  {
    r: new RegExp("Android[\\- ][\\d]+\\.[\\d]+\\.[\\d]+;[A-Za-z]{2}\\-[A-Za-z]{2};(.+) Build")
  },
  {
    r: new RegExp("Android[\\- ][\\d]+\\.[\\d]+; [A-Za-z]{2}\\-[A-Za-z]{2}; (.+) Build")
  },
  {
    r: new RegExp("Android[\\- ][\\d]+\\.[\\d]+\\.[\\d]+; (.+) Build")
  },
  {
    r: new RegExp("Android[\\- ][\\d]+\\.[\\d]+; (.+) Build")
  },
  {
    r: new RegExp("NokiaN([0-9]+)"),
    device: "Nokia N$1"
  },
  {
    r: new RegExp("NOKIA([A-Za-z0-9\\v-]+)"),
    device: "Nokia $1"
  },
  {
    r: new RegExp("Nokia([A-Za-z0-9\\v-]+)"),
    device: "Nokia $1"
  },
  {
    r: new RegExp("NOKIA ([A-Za-z0-9\\-]+)"),
    device: "Nokia $1"
  },
  {
    r: new RegExp("Nokia ([A-Za-z0-9\\-]+)"),
    device: "Nokia $1"
  },
  {
    r: new RegExp("Lumia ([A-Za-z0-9\\-]+)"),
    device: "Lumia $1"
  },
  {
    r: new RegExp("Symbian"),
    device: "Nokia"
  },
  {
    r: new RegExp("BB10; ([A-Za-z0-9\\- ]+)\\)"),
    device: "BlackBerry $1"
  },
  {
    r: new RegExp("(PlayBook).+RIM Tablet OS"),
    device: "BlackBerry Playbook"
  },
  {
    r: new RegExp("Black[Bb]erry ([0-9]+);"),
    device: "BlackBerry $1"
  },
  {
    r: new RegExp("Black[Bb]erry([0-9]+)"),
    device: "BlackBerry $1"
  },
  {
    r: new RegExp("Black[Bb]erry;"),
    device: "BlackBerry"
  },
  {
    r: new RegExp("(Pre)/(\\d+)\\.(\\d+)"),
    device: "Palm Pre"
  },
  {
    r: new RegExp("(Pixi)/(\\d+)\\.(\\d+)"),
    device: "Palm Pixi"
  },
  {
    r: new RegExp("(Touch[Pp]ad)/(\\d+)\\.(\\d+)"),
    device: "HP TouchPad"
  },
  {
    r: new RegExp("HPiPAQ([A-Za-z0-9]+)/(\\d+).(\\d+)"),
    device: "HP iPAQ $1"
  },
  {
    r: new RegExp("Palm([A-Za-z0-9]+)"),
    device: "Palm $1"
  },
  {
    r: new RegExp("Treo([A-Za-z0-9]+)"),
    device: "Palm Treo $1"
  },
  {
    r: new RegExp("webOS.*(P160UNA)/(\\d+).(\\d+)"),
    device: "HP Veer"
  },
  {
    r: new RegExp("(AppleTV)"),
    device: "AppleTV"
  },
  {
    r: new RegExp("AdsBot-Google-Mobile"),
    device: "Spider"
  },
  {
    r: new RegExp("Googlebot-Mobile/(\\d+).(\\d+)"),
    device: "Spider"
  },
  {
    r: new RegExp("(iPad) Simulator;")
  },
  {
    r: new RegExp("(iPad);")
  },
  {
    r: new RegExp("(iPod);")
  },
  {
    r: new RegExp("(iPhone) Simulator;")
  },
  {
    r: new RegExp("(iPhone);")
  },
  {
    r: new RegExp("acer_([A-Za-z0-9]+)_"),
    device: "Acer $1"
  },
  {
    r: new RegExp("acer_([A-Za-z0-9]+)_"),
    device: "Acer $1"
  },
  {
    r: new RegExp("ALCATEL-([A-Za-z0-9]+)"),
    device: "Alcatel $1"
  },
  {
    r: new RegExp("Alcatel-([A-Za-z0-9]+)"),
    device: "Alcatel $1"
  },
  {
    r: new RegExp("Amoi\\-([A-Za-z0-9]+)"),
    device: "Amoi $1"
  },
  {
    r: new RegExp("AMOI\\-([A-Za-z0-9]+)"),
    device: "Amoi $1"
  },
  {
    r: new RegExp("Asus\\-([A-Za-z0-9]+)"),
    device: "Asus $1"
  },
  {
    r: new RegExp("ASUS\\-([A-Za-z0-9]+)"),
    device: "Asus $1"
  },
  {
    r: new RegExp("BIRD\\-([A-Za-z0-9]+)"),
    device: "Bird $1"
  },
  {
    r: new RegExp("BIRD\\.([A-Za-z0-9]+)"),
    device: "Bird $1"
  },
  {
    r: new RegExp("BIRD ([A-Za-z0-9]+)"),
    device: "Bird $1"
  },
  {
    r: new RegExp("Dell ([A-Za-z0-9]+)"),
    device: "Dell $1"
  },
  {
    r: new RegExp("DoCoMo/2\\.0 ([A-Za-z0-9]+)"),
    device: "DoCoMo $1"
  },
  {
    r: new RegExp("([A-Za-z0-9]+)_W\\;FOMA"),
    device: "DoCoMo $1"
  },
  {
    r: new RegExp("([A-Za-z0-9]+)\\;FOMA"),
    device: "DoCoMo $1"
  },
  {
    r: new RegExp("Huawei([A-Za-z0-9]+)"),
    device: "Huawei $1"
  },
  {
    r: new RegExp("HUAWEI-([A-Za-z0-9]+)"),
    device: "Huawei $1"
  },
  {
    r: new RegExp("vodafone([A-Za-z0-9]+)"),
    device: "Huawei Vodafone $1"
  },
  {
    r: new RegExp("i\\-mate ([A-Za-z0-9]+)"),
    device: "i-mate $1"
  },
  {
    r: new RegExp("Kyocera\\-([A-Za-z0-9]+)"),
    device: "Kyocera $1"
  },
  {
    r: new RegExp("KWC\\-([A-Za-z0-9]+)"),
    device: "Kyocera $1"
  },
  {
    r: new RegExp("Lenovo\\-([A-Za-z0-9]+)"),
    device: "Lenovo $1"
  },
  {
    r: new RegExp("Lenovo_([A-Za-z0-9]+)"),
    device: "Lenovo $1"
  },
  {
    r: new RegExp("LG/([A-Za-z0-9]+)"),
    device: "LG $1"
  },
  {
    r: new RegExp("LG-LG([A-Za-z0-9]+)"),
    device: "LG $1"
  },
  {
    r: new RegExp("LGE-LG([A-Za-z0-9]+)"),
    device: "LG $1"
  },
  {
    r: new RegExp("LGE VX([A-Za-z0-9]+)"),
    device: "LG $1"
  },
  {
    r: new RegExp("LG ([A-Za-z0-9]+)"),
    device: "LG $1"
  },
  {
    r: new RegExp("LGE LG\\-AX([A-Za-z0-9]+)"),
    device: "LG $1"
  },
  {
    r: new RegExp("LG\\-([A-Za-z0-9]+)"),
    device: "LG $1"
  },
  {
    r: new RegExp("LGE\\-([A-Za-z0-9]+)"),
    device: "LG $1"
  },
  {
    r: new RegExp("LG([A-Za-z0-9]+)"),
    device: "LG $1"
  },
  {
    r: new RegExp("(KIN)\\.One (\\d+)\\.(\\d+)"),
    device: "Microsoft $1"
  },
  {
    r: new RegExp("(KIN)\\.Two (\\d+)\\.(\\d+)"),
    device: "Microsoft $1"
  },
  {
    r: new RegExp("(Motorola)\\-([A-Za-z0-9]+)")
  },
  {
    r: new RegExp("MOTO\\-([A-Za-z0-9]+)"),
    device: "Motorola $1"
  },
  {
    r: new RegExp("MOT\\-([A-Za-z0-9]+)"),
    device: "Motorola $1"
  },
  {
    r: new RegExp("(Nintendo WiiU)"),
    device: "Nintendo Wii U"
  },
  {
    r: new RegExp("Nintendo (DS|3DS|DSi|Wii);"),
    device: "Nintendo $1"
  },
  {
    r: new RegExp("Pantech([A-Za-z0-9]+)"),
    device: "Pantech $1"
  },
  {
    r: new RegExp("Philips([A-Za-z0-9]+)"),
    device: "Philips $1"
  },
  {
    r: new RegExp("Philips ([A-Za-z0-9]+)"),
    device: "Philips $1"
  },
  {
    r: new RegExp("SAMSUNG-([A-Za-z0-9\\-]+)"),
    device: "Samsung $1"
  },
  {
    r: new RegExp("SAMSUNG\\; ([A-Za-z0-9\\-]+)"),
    device: "Samsung $1"
  },
  {
    r: new RegExp("Dreamcast"),
    device: "Sega Dreamcast"
  },
  {
    r: new RegExp("Softbank/1\\.0/([A-Za-z0-9]+)"),
    device: "Softbank $1"
  },
  {
    r: new RegExp("Softbank/2\\.0/([A-Za-z0-9]+)"),
    device: "Softbank $1"
  },
  {
    r: new RegExp("(WebTV)/(\\d+).(\\d+)")
  },
  {
    r: new RegExp("(hiptop|avantgo|plucker|xiino|blazer|elaine|up.browser|up.link|mmp|smartphone|midp|wap|vodafone|o2|pocket|mobile|pda)"),
    device: "Generic Smartphone"
  },
  {
    r: new RegExp("^(1207|3gso|4thp|501i|502i|503i|504i|505i|506i|6310|6590|770s|802s|a wa|acer|acs\\-|airn|alav|asus|attw|au\\-m|aur |aus |abac|acoo|aiko|alco|alca|amoi|anex|anny|anyw|aptu|arch|argo|bell|bird|bw\\-n|bw\\-u|beck|benq|bilb|blac|c55/|cdm\\-|chtm|capi|comp|cond|craw|dall|dbte|dc\\-s|dica|ds\\-d|ds12|dait|devi|dmob|doco|dopo|el49|erk0|esl8|ez40|ez60|ez70|ezos|ezze|elai|emul|eric|ezwa|fake|fly\\-|fly_|g\\-mo|g1 u|g560|gf\\-5|grun|gene|go.w|good|grad|hcit|hd\\-m|hd\\-p|hd\\-t|hei\\-|hp i|hpip|hs\\-c|htc |htc\\-|htca|htcg)"),
    device: "Generic Feature Phone"
  },
  {
    r: new RegExp("^(htcp|htcs|htct|htc_|haie|hita|huaw|hutc|i\\-20|i\\-go|i\\-ma|i230|iac|iac\\-|iac/|ig01|im1k|inno|iris|jata|java|kddi|kgt|kgt/|kpt |kwc\\-|klon|lexi|lg g|lg\\-a|lg\\-b|lg\\-c|lg\\-d|lg\\-f|lg\\-g|lg\\-k|lg\\-l|lg\\-m|lg\\-o|lg\\-p|lg\\-s|lg\\-t|lg\\-u|lg\\-w|lg/k|lg/l|lg/u|lg50|lg54|lge\\-|lge/|lynx|leno|m1\\-w|m3ga|m50/|maui|mc01|mc21|mcca|medi|meri|mio8|mioa|mo01|mo02|mode|modo|mot |mot\\-|mt50|mtp1|mtv |mate|maxo|merc|mits|mobi|motv|mozz|n100|n101|n102|n202|n203|n300|n302|n500|n502|n505|n700|n701|n710|nec\\-|nem\\-|newg|neon)"),
    device: "Generic Feature Phone"
  },
  {
    r: new RegExp("^(netf|noki|nzph|o2 x|o2\\-x|opwv|owg1|opti|oran|ot\\-s|p800|pand|pg\\-1|pg\\-2|pg\\-3|pg\\-6|pg\\-8|pg\\-c|pg13|phil|pn\\-2|pt\\-g|palm|pana|pire|pock|pose|psio|qa\\-a|qc\\-2|qc\\-3|qc\\-5|qc\\-7|qc07|qc12|qc21|qc32|qc60|qci\\-|qwap|qtek|r380|r600|raks|rim9|rove|s55/|sage|sams|sc01|sch\\-|scp\\-|sdk/|se47|sec\\-|sec0|sec1|semc|sgh\\-|shar|sie\\-|sk\\-0|sl45|slid|smb3|smt5|sp01|sph\\-|spv |spv\\-|sy01|samm|sany|sava|scoo|send|siem|smar|smit|soft|sony|t\\-mo|t218|t250|t600|t610|t618|tcl\\-|tdg\\-|telm|tim\\-|ts70|tsm\\-|tsm3|tsm5|tx\\-9|tagt)"),
    device: "Generic Feature Phone"
  },
  {
    r: new RegExp("^(talk|teli|topl|tosh|up.b|upg1|utst|v400|v750|veri|vk\\-v|vk40|vk50|vk52|vk53|vm40|vx98|virg|vite|voda|vulc|w3c |w3c\\-|wapj|wapp|wapu|wapm|wig |wapi|wapr|wapv|wapy|wapa|waps|wapt|winc|winw|wonu|x700|xda2|xdag|yas\\-|your|zte\\-|zeto|aste|audi|avan|blaz|brew|brvw|bumb|ccwa|cell|cldc|cmd\\-|dang|eml2|fetc|hipt|http|ibro|idea|ikom|ipaq|jbro|jemu|jigs|keji|kyoc|kyok|libw|m\\-cr|midp|mmef|moto|mwbp|mywa|newt|nok6|o2im|pant|pdxg|play|pluc|port|prox|rozo|sama|seri|smal|symb|treo|upsi|vx52|vx53|vx60|vx61|vx70|vx80|vx81|vx83|vx85|wap\\-|webc|whit|wmlb|xda\\-|xda_)"),
    device: "Generic Feature Phone"
  },
  {
    r: new RegExp("(bot|borg|google(^tv)|yahoo|slurp|msnbot|msrbot|openbot|archiver|netresearch|lycos|scooter|altavista|teoma|gigabot|baiduspider|blitzbot|oegp|charlotte|furlbot|http%20client|polybot|htdig|ichiro|mogimogi|larbin|pompos|scrubby|searchsight|seekbot|semanticdiscovery|silk|snappy|speedy|spider|voila|vortex|voyager|zao|zeal|fast\\-webcrawler|converacrawler|dataparksearch|findlinks|crawler)"),
    device: "Spider"
  }
];
